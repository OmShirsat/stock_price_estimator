# -*- coding: utf-8 -*-
"""mlmodel stock.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bOvm7xQ7M7qRMGxaYZW9untjCa-zLd1K
"""

import math
import threading
import pandas as pd
import numpy as np
import datetime
import pandas_datareader
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense, LSTM
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')

import pandas as pd
import yfinance as yf
import matplotlib.pyplot as plt

# Download stock price data for
df = yf.download('INFY', start='2015-01-01', end='2022-12-31')
df

df.shape

plt.figure(figsize=(16,8))
plt.title('close price history')
plt.plot(df['Close'])
plt.xlabel('Date',fontsize=18)
plt.ylabel('Close price Rupees',fontsize=18)
plt.show()

data= df.filter(['Close'])
dataset =data.values
training_data_len =math.ceil(len(dataset)*0.8)
training_data_len

#scale the data
scaler= MinMaxScaler(feature_range=(0,1))
scaled_data = scaler.fit_transform(dataset)
scaled_data

#create training dataset
#create the scaled traing data set
train_data=scaled_data[0:training_data_len , : ]
#split the data
x_train =[]
y_train = []

for i in range(60, len(train_data)):
  x_train.append(train_data[i-60:i,0])
  y_train.append(train_data[i,0])
  if i<=61:
    print(x_train)
    print(y_train)
    print()

#convert x_train and y_train into numpy array to go to lstm mmodel
x_train, y_train = np.array(x_train),np.array(y_train)

#reshape the data
# lstm require three dimensional data
#x_train.shape=(1552, 60)
x_train= np.reshape(x_train,(1552,60,1))
x_train.shape

#build the lstm model
model = Sequential()
model.add(LSTM(50, return_sequences=True, input_shape=(x_train.shape[1], 1)))
model.add(LSTM(50, return_sequences=False))
model.add(Dense(25))
model.add(Dense(1))

#compile the model
model.compile(optimizer='adam', loss='mean_squared_error')

#train the model
model.fit(x_train,y_train, batch_size=1,epochs=1)

#create testing data set
#create a new arry containing scaled values 1552 to 2014
test_data= scaled_data[training_data_len- 60 : , : ]
#create the dataset x_test and y_ test
x_test = []
y_test = dataset[training_data_len: , : ]
for i in range(60, len(test_data)):
  x_test.append(test_data[i-60:i, 0])

#convert data to numpy array
x_test = np.array(x_test)

#reshape the data
x_test = np.reshape(x_test, (x_test.shape[0],x_test.shape[1],1))

#get the model predicted data values
predictions = model.predict(x_test)
predictions=scaler.inverse_transform(predictions)

#get the rmse
rmse=np.sqrt(np.mean(((predictions- y_test)**2)))
rmse

#plot the data
train = data[:training_data_len]
valid = data[training_data_len:]
valid['predictions']=predictions
#visualize
plt.figure(figsize=(16,8))
plt.title('Model')
plt.xlabel('Date', fontsize=18)
plt.ylabel("Close Price", fontsize=18)
plt.plot(train['Close'])
plt.plot(valid[['Close','predictions']])
plt.legend(['Train', 'Val' ,'Predictions'], loc='lower right' )
plt.show()

#show the valid and predictd prices
valid

#get the quote
stock_quote =yf.download('INFY', start='2019-01-01', end='2023-5-6')
new_df=stock_quote.filter(['Close'])
#last 60 days data close value
last_few_days=new_df[-60:].values
#scae data
last_few_days_scaled= scaler.transform(last_few_days)
#create an empty list
X_test = []
#append last 60 days
X_test.append(last_few_days_scaled)
#convert the X_test to numpy array
X_test= np.array(X_test)
#reshape the data
X_test=np.reshape(X_test,(X_test.shape[0],X_test.shape[1],1))
#get the predicted scaled  price
pred_price= model.predict(X_test)
#undo the saling
pred_price = scaler.inverse_transform(pred_price)
print(pred_price)